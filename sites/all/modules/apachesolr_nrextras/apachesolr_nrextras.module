<?php

/**
 * Implementation of hook_apachesolr_cck_fields_alter().
 *
 * Nodereference fields will get the chance to be indexed as a separate field.
 * The text from the referenced node will be saved into this field,
 * making the referring node discoverable via the text of the referenced
 * node.
 * To do this, we completely replace the nodereference mappings with
 * callbacks and displays from this module. This module is incompatible
 * with the previous default behavior, where nodereference fields are
 * facetable.
 */
function apachesolr_nrextras_apachesolr_cck_fields_alter(&$mappings) {
  $mappings['nodereference'] = array(
    'nodereference_buttons' => array(
      'display_callback' => 'apachesolr_cck_text_field_callback',
      'indexing_callback' => 'apachesolr_nrextras_indexing_callback',
      'index_type' => 'text',
      'facets' => FALSE,
    ),
    'nodereference_select' => array(
      'display_callback' => 'apachesolr_cck_text_field_callback',
      'indexing_callback' => 'apachesolr_nrextras_indexing_callback',
      'index_type' => 'text',
      'facets' => FALSE,
    ),
    'nodereference_autocomplete' => array(
      'display_callback' => 'apachesolr_cck_text_field_callback',
      'indexing_callback' => 'apachesolr_nrextras_indexing_callback',
      'index_type' => 'text',
      'facets' => FALSE,
    ),
  );
}

/**
 * A replacement indexing callback for optionwidget text fields for when
 * content_permissions are in use. Splits the indexing of these fields
 * into a dynamic string field and a dynamic text field. This allows
 * for both searching and faceting on the field.
 */
function apachesolr_nrextras_indexing_callback($node, $field_name, $cck_info) {
  $fields = array();
  if (isset($node->{$field_name})) {
    $index_key_string = apachesolr_index_key($cck_info);
    // Generate a key for text as well.
    $cck_info['index_type'] = 'text';
    $index_key_text = apachesolr_index_key($cck_info);
    foreach ($node->$field_name as $field) {
      if ($referenced_node = node_load($field['nid'])) {
        $referenced_node->build_mode = NODE_BUILD_SEARCH_INDEX;
        $referenced_node = node_build_content($referenced_node, FALSE, FALSE);
        $referenced_node->body = drupal_render($referenced_node->content);
        $referenced_node->title = apachesolr_clean_text($referenced_node->title);
        $fields[] = array(
          'key' => $index_key_text,
          'value' => $referenced_node->title . ' ' . $referenced_node->body,
        );
      }
    }
  }
  return $fields;
}

/**
 * Implementation of hook_apachesolr_modify_query().
 *
 * Modify searches to include referenced noded content.
 */
function apachesolr_nrextras_apachesolr_modify_query(&$query, &$params, $caller) {
  global $user;
  module_load_include('inc', 'content', 'includes/content.crud');
  $cck_field_instances = content_field_instance_read();
  $cck_fields = apachesolr_cck_fields();
  $keys = htmlspecialchars($query->get_query_basic(), ENT_NOQUOTES, 'UTF-8');
  foreach ($cck_field_instances as $field) {
    // Set the default allowed to TRUE for people who are not using
    // the content_permissions module.
    $allowed = TRUE;
    // For those using content_permissions, check field access on a
    // field-by-field basis.
    if (function_exists('content_permissions_field_access')) {
      $allowed = content_permissions_field_access('view', $field, $user);
    }
    if ($allowed && $field['type'] == 'nodereference') {
      $cck_info = array(
        'index_type' => 'text',
        'multiple' => $field['multiple'],
        'name' => 'cck_' . $field['field_name'],
      );
      $index_key = apachesolr_index_key($cck_info);
      if (strpos($params['fl'], $index_key) === FALSE) {
        $params['fl'] .= ',' . $index_key;
        $params['qf'][] = "{$index_key}^1.0";
        $params['hl.fl'] .= ",$index_key";
        // The comma separated strings are problematic as they don't work if they have a comma at the front.
        $params['hl.fl'] = implode(',', array_filter(explode(',', $params['hl.fl'])));
      }
    }
  }
  // If we set qf explicitly, it wipes out the sensible defaults from solrconfig.xml.
  // Thus we put them back in here, else nothing works at all.
  if (isset($params['qf'])) {
    foreach (explode(' ', 'body^40.0 title^5.0 name^3.0 taxonomy_names^2.0 tags_h1^5.0 tags_h2_h3^3.0 tags_h4_h5_h6^2.0 tags_inline^1.0') as $qf) {
      $params['qf'][] = $qf;
    }
  }
  // Likewise, setting hl.fl wipes solrconfig.xml settings.
  if (isset($params['hl.fl']) && strpos($params['hl.fl'], 'body') === FALSE) {
    $params['hl.fl'] .= ',body';
  }
}
