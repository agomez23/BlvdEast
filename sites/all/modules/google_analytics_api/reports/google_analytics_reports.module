<?php
// $Id: google_analytics_reports.module,v 1.1 2009/08/23 22:10:22 jkitching Exp $

/**
 * Implementation of hook_menu().
 */
function google_analytics_reports_menu() {
  $items['admin/google-analytics/report'] = array(
    'title' => t('Google Analytics Report Query'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_analytics_reports_query_form'),
    'access arguments' => array('access Google Analytics reports'),
    'type' => MENU_CALLBACK,
  );
  $items['statistics'] = array(
    'title' => t('Google Analytics API Statistics'),
    'page callback' => 'google_analytics_reports_statistics_page',
    'access arguments' => array('access Google Analytics reports'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/statistics'] = array(
    'title' => t('Statistics'),
    'page callback' => 'google_analytics_reports_statistics_page',
    'page arguments' => array(1, 'node'),
    'access arguments' => array('access Google Analytics reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function google_analytics_reports_api_perm() {
  return array('access Google Analytics reports');
}

/**
 * Main form for query page.
 */
function google_analytics_reports_query_form($form_state) {
  $form = array();

  $form['query']['info'] = array(
    '#value' => t('Please see ' . l('Google Analytics Data API Reference', 'http://code.google.com/apis/analytics/docs/gdata/gdataReferenceDimensionsMetrics.html') . ' for a list of dimensions and metrics.'),
  );
  $form['query']['dimensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Dimensions'),
    '#maxlength' => 300,
    '#description' => t('(browser, browserVersion, city, connectionSpeed, continent, date, hostname, pagePath, pageTitle...)'),
  );
  $form['query']['metrics'] = array(
    '#type' => 'textfield',
    '#title' => t('Metrics'),
    '#maxlength' => 300,
    '#description' => t('(entrances, pageviews, timeOnPage, visitors, visits...)'),
  );
  $form['query']['sort_metric'] = array(
    '#type' => 'textfield',
    '#title' => t('Sort Metric'),
    '#maxlength' => 300,
    '#description' => t('(e.g. -entrances, pageviews)'),
  );
  $form['query']['filter'] = array(
    '#type' => 'textfield',
    '#title' => t('Filter'),
    '#maxlength' => 300,
    '#description' => t('(e.g. country == United States && browser == Firefox || browser == Chrome)'),
  );
  $form['query']['start_date'] = array(
    '#type' => 'date',
    '#title' => t('Start Date'),
  );
  $form['query']['no_start_date'] = array(
    '#type' => 'checkbox',
    '#title' => t('No start date.'),
    '#default_value' => 1,
    '#description' => t('(Default: Google Analytics launch date of 1 Jan 2005)'),
  );
  $form['query']['end_date'] = array(
    '#type' => 'date',
    '#title' => t('End Date'),
  );
  $form['query']['no_end_date'] = array(
    '#type' => 'checkbox',
    '#title' => t('No end date.'),
    '#default_value' => 1,
    '#description' => t('(Default: Today)'),
  );
  $form['query']['start_index'] = array(
    '#type' => 'textfield',
    '#title' => t('Start Index'),
    '#default_value' => 1,
  );
  $form['query']['max_results'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum Results'),
    '#default_value' => 10000,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit query'),
  );
  $form['#redirect'] = FALSE;

  if (!empty($form_state['post'])) {
    $form['results'] = array(
      '#type' => 'item',
      '#title' => t('Query results'),
      '#value' => _google_analytics_reports_query_form_fetch_results($form_state),
    );
  }

  return $form;
}

function _google_analytics_reports_query_form_fetch_results($form_state = array()) {
  // Parse all of the form data.
  $dimensions = _google_analytics_reports_query_form_process($form_state['post']['dimensions']);
  $metrics = _google_analytics_reports_query_form_process($form_state['post']['metrics']);
  $sort_metric = _google_analytics_reports_query_form_process($form_state['post']['sort_metric']);
  $filter = $form_state['post']['filter'];
  $start_date = null;
  if ($form_state['post']['no_start_date'] != '1') {
    $start_date =
      $form_state['post']['start_date']['year'] . '-' .
      str_pad($form_state['post']['start_date']['month'], 2, '0', STR_PAD_LEFT) . '-' .
      str_pad($form_state['post']['start_date']['day'], 2, '0', STR_PAD_LEFT);
  }
  $end_date = null;
  if ($form_state['post']['no_end_date'] != '1') {
    $end_date =
      $form_state['post']['end_date']['year'] . '-' .
      str_pad($form_state['post']['end_date']['month'], 2, '0', STR_PAD_LEFT) . '-' .
      str_pad($form_state['post']['end_date']['day'], 2, '0', STR_PAD_LEFT);
  }
  $start_index = $form_state['post']['start_index'];
  $max_results = $form_state['post']['max_results'];

  // Construct request array.
  $request = array(
    '#dimensions' => $dimensions,
    '#metrics' => $metrics,
    '#sort_metric' => $sort_metric,
    '#filter' => $filter,
    '#start_date' => $start_date,
    '#end_date' => $end_date,
    '#start_index' => $start_index,
    '#max_results' => $max_results,
  );
  try {
    $entries = google_analytics_api_report_data($request);
  }
  catch (Exception $e) {
    return $e->getMessage();
  }

  $header = array_merge($dimensions, $metrics);

  $rows = array();
  foreach ($entries as $entry) {
    $row = array();
    $row = array_merge($row, $entry->getDimensions());
    $row = array_merge($row, $entry->getMetrics());
    $rows[] = $row;
  }
  $totals = array(t('Aggregate Value'));
  $totals = array_pad($totals, sizeof($dimensions), '');
  $totals = array_merge($totals, google_analytics_api_gapi()->getMetrics());
  $rows[] = $totals;

  return theme('table', $header, $rows);
}

/**
 * Process a query string.
 */
function _google_analytics_reports_query_form_process($string) {
  $array = explode(',', $string);
  $return = array();
  foreach ($array as $value) {
    if ($value = trim($value)) {
      $return[] = $value;
    }
  }
  return $return;
}

/*
 * Return a list of paths that are aliased with the given path (including the given path).
 */
function _google_analytics_reports_path_aliases($node_path = null) {
  // Default path is the current path.
  if ($node_path == null) {
    $node_path = $_GET['q'];
  }

  // Get the normal node path if it is a node.
  $node_path = drupal_get_normal_path($node_path);

  // Grab all aliases.
  $aliases = array($node_path);
  $result = db_query("SELECT * FROM {url_alias} WHERE src = '%s'", $node_path);
  while ($row = db_fetch_array($result)) {
    $aliases[] = $row['dst'];
  }

  // If this is the front page, add the base path too, and index.php for good measure.
  // There may be other ways that the user is accessing the front page but we can't
  // account for them all.
  if ($node_path == drupal_get_normal_path(variable_get('site_frontpage', 'node'))) {
    $aliases[] = '';
    $aliases[] = 'index.php';
  }

  return $aliases;
}

/*
 * Construct a filter string that grabs pagePaths corresponding to the specified node or path.
 */
function _google_analytics_reports_path_filter($node_path = null) {
  $aliases = _google_analytics_reports_path_aliases($node_path);

  // Okay, this is ridiculous.  Google Analytics regex filters
  // have a limit of 32 characters.  Therefore we can't simply
  // create one filter per pagePath.  Instead we are going too
  // do a "contains substring" match on the path, and then take
  // as many of the ending characters paired with ([?#].*)?$. If
  // this will all fit in one regex under 32 characters then so
  // be it.  Return a string if they all do, or an array if not.

  // 32 - 12 = 20 characters maximum for alias
  $under_filters = array();
  $over_filters = array();
  foreach ($aliases as $alias) {
    if (strlen($alias) <= 20) {
      $under_filters[] = 'pagePath =~ ^/' . $alias . '([?#].*)?$';
    }
    else {
      $over_filters[] = array(
        'pagePath =@ /' . $alias,
        // 32 - 10 = 22 characters
        'pagePath =~ ' . substr($alias, -22) . '([?#].*)?$'
      );
    }
  }

  // Add pipes and put together under and over filters.
  $filters = array();
  if ($under_filters) {
    $filters[] = implode(' || ', $under_filters);
  }
  foreach ($over_filters as $filter) {
    $filters[] = implode(' && ', $filter);
  }
  return $filters;
}

/*
 * Block for showing statistics of the current path.
 */
function google_analytics_reports_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Google Analytics Statistics');
      return $blocks;
    case 'view':
      $blocks['subject'] = t('Google Analytics Statistics');
      $blocks['content'] = google_analytics_reports_current_summary();
      return $blocks;
  }
}

/*
 * Function to collect together data for different aliases.
 */
function google_analytics_reports_path_report($request, $path = null, $group_by = 'date') {
  $data = array();
  foreach (_google_analytics_reports_path_filter($path) as $filter) {
    $request['#filter'] = $filter;
    $new_data = google_analytics_api_report_data($request);
    if ($new_data) {
      $data = array_merge($data, $new_data);
    }
  }

  // Add up all the statistics for different paths.
  $rows = array();
  foreach ($data as $item) {
    $dimensions = $item->getDimensions();
    if (is_array($group_by)) {
      $group_name = '';
      foreach ($group_by as $group_by_item) {
        $group_name .= $dimensions[$group_by_item];
      }
    }
    else {
      $group_name = $dimensions[$group_by];
    }
    if (isset($rows[$group_name])) {
      foreach ($item->getMetrics() as $key => $value) {
        $rows[$group_name][$key] += $value;
      }
    }
    else {
      $rows[$group_name] = $item->getMetrics();
    }
  }
  return $rows;
}

/*
 * Create a statistics summary block and return it.
 */
function google_analytics_reports_current_summary($path = null) {
  // Ensure user has permission to view this block.
  if (!user_access('access Google Analytics reports')) {
    return FALSE;
  }

  // Ensure the user is logged in.
  if (!google_analytics_api_gapi()) {
    return 'Please ' . l('grant access', 'admin/settings/google_analytics_api') . ' to your Google account.';
  }

  // Grab the data.
  $request = array(
    '#dimensions' => array('pagePath', 'date'),
    '#metrics' => array('pageviews', 'timeOnPage', 'bounces', 'uniquePageviews'),
    '#sort_metric' => array('date', 'pagePath'),
    '#start_date' => strtotime('-14 days')
  );
  $rows = google_analytics_reports_path_report($request, $path);

  // Check for data.
  if (!$rows) {
    return '<p>No analytics data is currently available for this path.</p>';
  }

  // Format and perform calculations to display charts.
  $chart_page_views = array();
  $chart_avg_time = array();
  $chart_bounce_rate = array();
  $chart_dates = array();
  foreach ($rows as $date => $row) {
    $chart_pageviews[] = $row['pageviews'];
    $chart_avg_time[] = number_format($row['timeOnPage'] / $row['pageviews'], 1);
    $chart_bounce_rate[] = number_format($row['bounces'] / $row['uniquePageviews'] * 100, 2);
    $chart_dates[] = date('M d', strtotime($date));
  }

  // Create charts.
  $pageviews_chart = _google_analytics_reports_sparkline_chart('page_views', t('Page Views'), $chart_pageviews, $chart_dates);
  $avg_time_chart = _google_analytics_reports_sparkline_chart('avg_time', t('Average Time (s)'), $chart_avg_time, $chart_dates);
  $avg_bounce_rate = _google_analytics_reports_sparkline_chart('bounce_rate', t('Bounce Rate (%)'), $chart_bounce_rate, $chart_dates);

  // Text description.
  $description = t('<p>Statistics for past 14 days:</p>');
  $description .= '<p><strong>/' . drupal_get_path_alias($_GET['q']) . '</strong></p>';

  // See more link.
  $more_link = l(t('See more statistics...'), 'statistics', array('query' => 'path=' . $_GET['q']));

  return $description
    . chart_render($pageviews_chart)
    . chart_render($avg_time_chart)
    . chart_render($avg_bounce_rate)
    . $more_link;
}

/*
 * Detailed chart.
 */
function _google_analytics_reports_main_chart($id, $title, $data, $dates) {
  $chart = array(
    '#chart_id' => $id,
    '#title' => $title,
    '#type' => CHART_TYPE_LINE,
    '#size' => chart_size(600, 150),
    '#adjust_resolution' => TRUE,
    '#data_colors' => array('0077cc'),
    '#line_styles' => array(chart_line_style(3, 10, 0)),
    '#shape_markers' => array(chart_shape_marker(0, -1, 'o', 9, '0055aa')),
    '#grid_lines' => chart_grid_lines(0, 20, 1, 3),
  );
  $chart['#data'] = $data;
  $chart['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][0][] = chart_mixed_axis_range_label(0, max($data));
  foreach ($dates as $date) {
    $chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][1][] = chart_mixed_axis_label($date);
  }
  return $chart;
}

/*
 * Sparkline chart.
 */
function _google_analytics_reports_sparkline_chart($id, $title, $data, $dates) {
  $chart = _google_analytics_reports_main_chart($id, $title, $data, $dates);
  $chart['#size'] = chart_size(200, 80);
  $chart['#shape_markers'] = array(chart_shape_marker(0, -1, 'o', 6, '0055aa'));
  unset($chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM]);
  return $chart;
}

/*
 * Main statistics page.
 */
function google_analytics_reports_statistics_page($path = null) {
  if ($path == null) {
    $path = $_GET['path'];
  }
  elseif (is_object($path)) {
    $path = $path->path;
  }

  $output = t('<p>These paths were searched for statistics:</p>');

  $aliases = _google_analytics_reports_path_aliases($path);
  foreach ($aliases as $key => $value) {
    $aliases[$key] = '/' . $aliases[$key];
  }
  $aliases_list = theme('item_list', $aliases);
  $output .= $aliases_list;

  // Grab the data.
  $request = array(
    '#dimensions' => array('pagePath', 'date'),
    '#metrics' => array('pageviews', 'timeOnPage', 'bounces', 'uniquePageviews'),
    '#sort_metric' => array('date', 'pagePath'),
    '#start_date' => strtotime('-35 days')
  );
  $rows = google_analytics_reports_path_report($request, $path);

  // Check for data.
  if (!$rows) {
    return '<p>No analytics data is currently available for this path.</p>';
  }

  // Format and perform calculations to display charts.
  $chart_page_views = array();
  $chart_avg_time = array();
  $chart_bounce_rate = array();
  $chart_dates = array();
  foreach ($rows as $date => $row) {
    $chart_pageviews[] = $row['pageviews'];
    $chart_avg_time[] = number_format($row['timeOnPage'] / $row['pageviews'], 1);
    $chart_bounce_rate[] = number_format($row['bounces'] / $row['uniquePageviews'] * 100, 2);
    $chart_dates[] = date('d', strtotime($date));
  }

  // Create charts.
  $output .= chart_render(_google_analytics_reports_main_chart('page_views', t('Page Views'), $chart_pageviews, $chart_dates));
  $output .= chart_render($avg_time_chart = _google_analytics_reports_main_chart('avg_time', t('Average Time (s)'), $chart_avg_time, $chart_dates));
  $output .= chart_render(_google_analytics_reports_main_chart('bounce_rate', t('Bounce Rate (%)'), $chart_bounce_rate, $chart_dates));

  // Query for browser usage information.
  $request = array(
    '#dimensions' => array('pagePath', 'browser'),
    '#metrics' => array('pageviews'),
    '#sort_metric' => array('browser', 'pagePath'),
  );
  $rows = google_analytics_reports_path_report($request, $path, 'browser');
  $browsers = array();
  $total_views = 0;
  foreach ($rows as $key => $value) {
    $total_views += $value['pageviews'];
    $browsers[$key] = $value['pageviews'];
  }

  // Any browsers with a marketshare below 0.1% don't get shown.
  $filtered_browsers = array();
  $threshold = $total_views * 0.001;
  foreach ($browsers as $key => $value) {
    if ($value > $threshold) {
      $filtered_browsers[$key] = $value;
    }
  }

  // Create browser chart.
  $chart = array(
    '#chart_id' => 'browsers',
    '#title' => 'Browser Usage',
    '#type' => CHART_TYPE_PIE,
    '#size' => chart_size(600, 300),
    '#data' => $filtered_browsers,
    '#labels' => array_keys($filtered_browsers),
  );
  $output .= chart_render($chart);

  // Get geographical information.
  $request = array(
    '#dimensions' => array('pagePath', 'country'),
    '#metrics' => array('pageviews'),
    '#sort_metric' => array('country', 'pagePath'),
  );
  $rows = google_analytics_reports_path_report($request, $path, 'country');
  $name_to_iso = countries_api_get_array('name', 'iso2');
  $countries = array();
  $max_pageviews = 0;
  foreach ($rows as $key => $value) {
    $match = $name_to_iso[strtoupper($key)];
    if ($match) {
      $max_pageviews = max($max_pageviews, $value['pageviews']);
      $countries[$match] = $value['pageviews'];
    }
  }

  // Find out proportion share from 1-100 for each country.
  $countries_share = array();
  foreach ($countries as $key => $value) {
    $countries_share[$key] = round(($value / $max_pageviews) * 100);
  }

  // Create the geographical chart.
  $chart = array(
    '#chart_id' => 'countries',
    '#type' => CHART_TYPE_MAP,
    '#size' => chart_size(440, 220),
    '#georange' => 'world',
    '#countries' => array_keys($countries_share),
    '#data' => array_values($countries_share),
    '#data_colors' => array('ffffff', 'edf0d4', '13390a'),
  );

  $output .= t('<h3>Geographical Usage</h3>');
  $output .= chart_render($chart);

  // Query for referrer information.
  $request = array(
    '#dimensions' => array('pagePath', 'source', 'referralPath'),
    '#metrics' => array('pageviews'),
    '#sort_metric' => array('source', 'referralPath', 'pagePath'),
    '#start_date' => strtotime('-1 month')
  );
  $rows = google_analytics_reports_path_report($request, $path, array('source', 'referralPath'));

  // Sort rows in descending order.
  $referrers = array();
  $total_referrers = 0;
  foreach ($rows as $key => $row) {
    $total_referrers += $row['pageviews'];
    $referrers[$key] = $row['pageviews'];
  }
  asort($referrers);
  $referrers = array_reverse($referrers);

  // Create a table.
  $headers = array('Page Views', 'Source');
  $rows = array();
  $threshold = $total_referrers * 0.005;
  foreach ($referrers as $site => $pageviews) {
    if ($pageviews < $threshold) {
      continue;
    }
    if (!strstr($site, '(not set)')) {
      $rows[] = array($pageviews, l($site, 'http://' . $site));
    }
    else {
      $rows[] = array($pageviews, $site);
    }
  }

  $output .= t('<h3>Top Referrers (Past Month)</h3>');
  $output .= theme('table', $headers, $rows);

  return $output;
}
