<?php
// $Id: exportables.module,v 1.1.2.9 2009/12/10 17:04:52 jazzslider Exp $

/**
 * Implementation of hook_init().
 * 
 * @return void
 */
function exportables_init() {
  // Now that exportables_sync() isn't run on every page load unless the
  // user has enabled it, we still need to run exportables_type_info() to
  // ensure that the necessary files from modules/ are loaded by the time
  // the features module starts looking for hooks.
  exportables_type_info();
  if (variable_get('exportables_sync_on_init', 0)) {
    exportables_sync();
  }
}

/**
 * Implementation of hook_menu().
 */
function exportables_menu() {
  $items = array();
  $items['admin/build/exportables'] = array(
    'title' => 'Exportables',
    'description' => 'Administer exportables.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exportables_admin_general_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/build/exportables/general'] = array(
    'title' => 'General settings',
    'description' => 'General configuration settings for exportables.',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/build/exportables/sync'] = array(
    'title' => 'Synchronize',
    'description' => 'Synchronize default items provided by the exportables module hooks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exportables_admin_sync_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/exportables/unsync'] = array(
    'title' => 'Un-synchronize',
    'description' => 'Remove default items provided by the exportables module hooks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exportables_admin_unsync_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Administration form for basic exportables settings.
 *
 * @param array $form_state
 * @return array FormAPI array describing the form
 */
function exportables_admin_general_form($form_state) {
  $form = array();

  $form['exportables_sync_on_init'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sync on init'),
    '#description' => t('If checked, all exportables defaults will be synchronized with the database on every non-cached page load.  This can cause significant performance problems on large sites.'),
    '#default_value' => variable_get('exportables_sync_on_init', 0),
  );

  return system_settings_form($form);
}

/**
 * Administration form for synchronizing exportables defaults.
 *
 * @param array $form_state
 * @return array FormAPI array describing the form
 */
function exportables_admin_sync_form($form_state) {
  $form = array();

  $type_info = exportables_type_info();
  $types = array();
  foreach ($type_info as $type => $values) {
    $types[$type] = $type;
  }

  $form['types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Types'),
    '#description' => t('Select which type(s) of exportables defaults you would like to sync.  If you do not check anything here, all types while be synchronized on submit.'),
    '#options' => $types,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#title' => t('Resync'),
    '#value' => t('Resync'),
  );

  $form['#submit'][] = 'exportables_admin_sync_form_submit';

  return $form;
}

/**
 * Submit function for exportables_admin_sync_form().
 */
function exportables_admin_sync_form_submit($form, $form_state) {
  $types = array();
  foreach ($form_state['values']['types'] as $type => $value) {
    if (!$value) {
      continue;
    }
    $types[] = $type;
  }
  if (count($types) > 0) {
    exportables_sync($types);
  }
  else {
    // Nothing explicitly checked, so sync everything.
    exportables_sync();
  }
}

/**
 * Administration form for un-synchronizing exportables defaults.
 *
 * @param array $form_state
 * @return array FormAPI array describing the form
 */
function exportables_admin_unsync_form($form_state) {
  $form = exportables_admin_sync_form($form_state);

  $form['types']['#description'] = t('Select which type(s) of exportables defaults you would like to remove from the database.  If you do not check anything here, all types will be removed on submit.');
  $form['submit']['#title'] = t('Un-sync');
  $form['submit']['#value'] = t('Un-sync');

  $form['#submit'] = array('exportables_admin_unsync_form_submit'); // override the sync form's submit callback

  return $form;
}

/**
 * Submit function for exportables_admin_unsync_form().
 */
function exportables_admin_unsync_form_submit($form, $form_state) {
  $types = array();
  foreach ($form_state['values']['types'] as $type => $value) {
    if (!$value) {
      continue;
    }
    $types[] = $type;
  }
  if (count($types) > 0) {
    exportables_unsync($types);
  }
  else {
    exportables_unsync();
  }
}

/**
 * Get info about exportable types.
 * 
 * @param string $get_type
 *   The type of exportable to get info about. Optional. If nothing is passed,
 *   then all types are returned.
 * @param boolean $refresh
 *   Types are cached - this refreshes the cache.
 * @return array
 */
function exportables_type_info($get_type = '', $refresh = FALSE) {
  static $cache;
  if (!$cache || $refresh) {
    foreach (module_list() as $module) {
      $path = drupal_get_path('module', 'exportables') .'/modules/'. $module .'.inc';
      if (file_exists($path)) {
        include_once $path;
      }
    }
    $cache = module_invoke_all('exportables');
    foreach ($cache as $type => $value) {
       $cache[$type] += array(
        'update function'   => $value['save function'],
        'title property'    => 'title',
        'storage type'      => 'object',
        'type'              => $type,
        'unique properties' => array($value['id property']),
      );
    }
  }
  if ($get_type && !empty($cache[$get_type])) {
    return $cache[$get_type];
  }
  return $cache;
}

// ---------------- EXPORTING -----------------

/**
 * Exports an object given the type of object.
 * @param string $type
 * @param mixed $object
 * @param string $indent
 * @return string
 *   Returns the exported PHP code.
 */
function exportables_export($type, $object, $indent = '') {
  exportables_machine_get($type, $object);
  $object = (object) $object;
  $info = exportables_type_info($type);
  unset($object->{$info['id property']});
  settype($object, $info['storage type']);
  return exportables_var_export($object, $indent, FALSE);
}

/**
 * Exports an object given type and id.
 * @param string $type
 * @param integer $id
 * @param string $indent
 * @return string
 *   Returns the exported PHP code.
 */
function exportables_export_id($type, $id, $indent = '') {
  $info = exportables_type_info($type);
  $function = $info['load function'];
  $object = $function($id);
  return exportables_export($type, $object, $indent);
}

/**
 * Exports an object given type and machine name.
 * @param string $type
 * @param string $machine
 * @param string $indent
 * @return string
 *   Returns the exported PHP code.
 */
function exportables_export_machine($type, $machine, $indent = '') {
  $info = exportables_type_info($type);
  $function = $info['load function'];
  $object = $function(exportables_machine_load_id($type, $machine));
  return exportables_export($type, $object, $indent);
}

/**
 * Export var function -- from Views.
 * @param mixed $var
 * @param string $prefix
 * @param boolean $multiple
 * @return string
 *   Returns the exported PHP code.
 */
function exportables_var_export($var, $prefix = '', $multiple = TRUE) {
  $output = '';
  if (is_object($var)) {
    $output = '('. gettype($var) .') ';
    $var = (array) $var;
  }
  if (is_array($var)) {
    if (empty($var)) {
      $output .= 'array()';
    }
    else {
      $output .= "array(\n";
      foreach ($var as $key => $value) {
        $output .= "  '$key' => ". exportables_var_export($value, '  ') .",\n";
      }
      $output .= ')';
    }
  }
  else if (is_bool($var)) {
    $output = $var ? 'TRUE' : 'FALSE';
  }
  elseif (is_int($var) || is_float($var)) {
    $output = (string) $var;
  }
  else {
    $output = var_export($var, TRUE);
  }

  if ($prefix) {
    $output = str_replace("\n", "\n$prefix", $output);
  }

  return $output;
}

// ------------- CODE-DB SYNCING --------------

/**
 * Sync in-code and database versions.
 * @param string|array $type array of types to sync, or single string type
 * @param string|array $module array of modules to sync, or single string module name
 * @return void
 */
function exportables_sync($type = '', $module = '') {
  $types = _exportables_get_type_array($type);

  foreach ($types as $type) {
    $info = exportables_type_info($type);
    $items = exportables_get_default_items($type, $module);
    foreach ($items as $item) {
      $item = (object) $item;
      if (!property_exists($item, 'machine') || empty($item->machine)) {
        drupal_set_message(t('One of the default !type items is missing its required machine-readable ID.', array(
          '!type' => $type
        )), 'warning');
        continue;
      }
      $machine = $item->machine;
      // Check the ID - a lack of ID would mean that it wasn't saved in the
      // database.
      $id = exportables_machine_load_id($type, $machine);
      if (!$id) {
        // Has not been saved yet; save it.
        $result = exportables_insert_object($type, $item, $machine);
        if (!$result) {
          drupal_set_message(t('An error occurred while trying to sync !type item !machine to the database.', array(
            '!type' => $type, 
            '!machine' => $machine
          )), 'warning');
          continue;
        }
      }
      else {
        $load = exportables_load_object($type, $id);
        // If it's loaded, it exists.
        if ($load) {
          // See if the loaded version is the same as a previouly stored in-DB default.
          $cached_default = exportables_load_object_from_cache($type, $machine);
          if ($cached_default == $load && $cached_default != $item) {
            // If so, replace it.
            $result = exportables_update_object($type, $item, $machine);
            if (!$result) {
              drupal_set_message(t('An error occurred while replacing modified !type item !machine.', array(
                '!type' => $type,
                '!machine' => $machine,
              )), 'warning');
              continue;
            }
          }
          // If not, do nothing.
        }
        // It's been deleted.
        else {
          $result = exportables_machine_delete($type, $id, $machine);
          if (!$result) {
            drupal_set_message(t('The machine-readable name for previously-deleted !type item !machine could not be deleted.', array(
              '!type' => $type, 
              '!machine' => $machine
            )), 'warning');
            continue;
          }
          $result = exportables_insert_object($type, $item, $machine);
          if (!$result) {
            drupal_set_message(t('An error occurred while trying to re-sync previously-deleted !type item !machine.', array(
              '!type' => $type,
              '!machine' => $machine,
            )), 'warning');
            continue;
          }
        }
      }
      $result = exportables_cache_object($type, $item, $machine);
      if (!$result) {
        drupal_set_message(t('An error occurred while trying to cache the current state of !type item !machine.', array(
          '!type' => $type,
          '!machine' => $machine,
        )), 'warning');
        continue;
      }
    }
  }
}

function exportables_unsync($type = '', $module = '') {
  $types = _exportables_get_type_array($type);

  foreach ($types as $type) {
    $info = exportables_type_info($type);
    $items = exportables_get_default_items($type, $module);
    foreach ($items as $item) {
      $item = (object) $item;
      $machine = $item->machine;

      if (exportables_object_is_overridden($type, $item, $machine)) {
        // The item has been overridden; do not delete it.
        continue;
      }

      $result = exportables_delete_object($type, $item, $machine);
      if (!$result) {
        drupal_set_message(t('Default !type item !machine could not be deleted.', array(
          '!type' => $type,
          '!machine' => $machine,
        )), 'warning');
        continue;
      }
    }
  }
}

/**
 * Gets default items of a particular type, optionally filtered by module.
 * @param string $type
 * @param string|array $module
 * @return array
 */
function exportables_get_default_items($type, $module = '') {
  $modules = _exportables_get_module_array($module);
  $info = exportables_type_info($type);

  if (!$modules) {
    $items = module_invoke_all($info['hook name']);
  }
  else {
    $items = array();
    foreach ($modules as $module) {
      $module_items = module_invoke($module, $info['hook name']);
      if (!is_array($module_items)) {
        // If it didn't return an array, there's not much we can do with it.
        continue;
      }
      $items = array_merge($items, $module_items);
    }
  }

  return $items;
}

/**
 * Utility function to convert type argument into normalized array.
 * @param string|array $type
 *   The $type argument can be an array of type names, a single string type,
 *   or anything that evaluates FALSE. If it evaluates to FALSE, the return
 *   value will be all possible types.
 * @return array
 *   Returns an array of type names.
 */
function _exportables_get_type_array($type = '') {
  if (!$type) {
    $types = array_keys(exportables_type_info());
  }
  else if (is_string($type)) {
    $types = array($type);
  }
  else {
    $types = (array) $type;
  }
  return $types;
}

/**
 * Utility function to convert module argument into normalized array.
 * @param string|array $module
 *   The $module argument can be an array of module names, a single string
 *   module name, or anything that evaluates FALSE. If it evaluates to FALSE,
 *   the return value will also be FALSE, indicating that no particular
 *   module was specified.
 * @return array
 *   Returns an array of module names.
 */
function _exportables_get_module_array($module = '') {
  if (!$module) {
    return FALSE;
  }
  else if (is_string($module)) {
    $modules = array($module);
  }
  else {
    $modules = (array) $module;
  }
  return $modules;
}

/**
 * Compares two object to see if they are the same.
 * @param mixed $one
 * @param mixed $two
 * @return boolean
 *   Returns true if they are the same, false if not.
 * @deprecated
 *   Developers should use the == operator instead,
 *   as this function simply duplicates its behavior.
 */
function exportables_compare_object($one, $two) {
  return $one == $two;
}

/**
 * Prepare an object to be saved to the database.
 * @param string $type
 * @param integer $id
 * @param mixed $item
 * @return mixed
 *   Returns the prepared item.
 */
function exportables_prepare_object($type, $id, $item) {
  $info = exportables_type_info($type);
  $item = (object) $item;
  unset($item->machine);
  // Set the in-DB default to be the in-code default.
  $item->{$info['id property']} = $id;
  settype($item, $info['storage type']);
  return $item;
}

/**
 * Load an object from the database.
 * @param string $type
 * @param integer $id
 * @return mixed
 */
function exportables_load_object($type, $id) {
  $info = exportables_type_info($type);
  return $info['load function']($id);
}

/**
 * Insert a new object into the database.
 * @param string $type
 * @param mixed $object
 * @return boolean
 *   Returns true if succeeded, false if failed.
 */
function exportables_insert_object($type, $object, $machine) {
  $info = exportables_type_info($type);
  settype($object, $info['storage type']);
  $function = $info['save function'];
  $result = $function($object);
  if (!$result) {
    drupal_set_message(t('The default !type item !machine could not be synchronized to the database.', array(
      '!type' => $type, 
      '!machine' => $machine
    )), 'warning');
    return FALSE;
  }
  // Associate the machine-readable name with the ID.
  $result = exportables_machine_save($type, $object, $machine);
  if (!$result) {
    drupal_set_message(t('The default !type item !machine was synchronized to the database, but its machine-readable name could not be saved.', array(
      '!type' => $type, 
      '!machine' => $machine
    )), 'warning');
    return FALSE;
  }
  return TRUE;
}

/**
 * Update an existing object in the database.
 * @param string $type
 * @param mixed $object
 * @param string $machine
 * @return array
 *   Returns true if succeeded, false if failed.
 */
function exportables_update_object($type, $object, $machine) {
  $info = exportables_type_info($type);
  $function = $info['update function'];
  $result = $function(exportables_prepare_object($type, $id, $object));
  if (!$result) {
    drupal_set_message(t('The default !type item !machine could not be updated in the database.', array(
      '!type' => $type, 
      '!machine' => $machine
    )), 'warning');
    return FALSE;
  }
  return TRUE;
}

/**
 * Delete an object from the database.
 * @param string $type
 * @param mixed $object
 * @param string $machine
 * @return array
 *   Returns true if succeeded, false if failed.
 */
function exportables_delete_object($type, $object, $machine) {
  $object = (object) $object;
  $info = exportables_type_info($type);

  $id = exportables_machine_load_id($type, $machine);
  if (!$id) {
    // Doesn't exist anyway.
    return TRUE;
  }

  // Delete the item itself.
  $function = $info['delete function'];
  $result = $function($id);
  if (!$result) {
    drupal_set_message(t('The default !type item !machine could not be deleted from the database.', array(
      '!type' => $type,
      '!machine' => $machine,
    )), 'warning');
    return FALSE;
  }

  // Delete the item's machine-readable name.
  $result = exportables_machine_delete($type, $id, $machine);
  if (!$result) {
    drupal_set_message(t('The default !type item !machine was successfully deleted, but its machine-readable name could not be deleted.', array(
      '!type' => $type,
      '!machine' => $machine,
    )), 'warning');
    return FALSE;
  }

  // Delete any cached versions of the object.
  $result = exportables_delete_object_from_cache($type, $machine);
  if (!$result) {
    drupal_set_message(t('The default !type item !machine was successfully deleted, but its cached version could not be deleted.', array(
      '!type' => $type,
      '!machine' => $machine,
    )), 'warning');
    return FALSE;
  }

  return TRUE;
}

/**
 * Check to see if an object is in an overridden state.
 * @param string $type
 * @param mixed $object
 * @param string $machine
 * @return boolean
 *   Returns true if overridden (database version is different from
 *   default), false if not.
 */
function exportables_object_is_overridden($type, $object, $machine) {
  $load = exportables_load_object($type, exportables_machine_load_id($type, $machine));
  if ($object == $load) {
    // In-database object is identical to provided default; it is not overridden.
    return FALSE;
  } else {
    // In-database object differs from provided default; it is overridden.
    return TRUE;
  }
}

/**
 * Store an object in the exportables cache.
 * @param string $type
 * @param mixed $object
 * @param string $machine
 * @return array
 *   Returns true if succeeded, false if failed.
 */
function exportables_cache_object($type, $object, $machine) {
  $info = exportables_type_info($type);
  settype($object, $info['storage type']);
  $array = array(
    'type' => $type, 
    'machine' => $machine, 
    'object' => serialize($object)
  );
  if (db_result(db_query("SELECT * FROM {exportables_object_cache} WHERE type = '%s' AND machine = '%s'", $type, $machine))) {
    $result = drupal_write_record('exportables_object_cache', $array, array('type', 'machine'));
  }
  else {
    $result = drupal_write_record('exportables_object_cache', $array);
  }
  if (!$result) {
    drupal_set_message(t('The !type item !machine could not be written to the exportables object cache.', array(
      '!type' => $type, 
      '!machine' => $machine
    )), 'warning');
    return FALSE;
  }
  return TRUE;
}

/**
 * Loads an object from cache.
 * @param string $type
 * @param string $machine
 * @return mixed
 */
function exportables_load_object_from_cache($type, $machine) {
  $object = unserialize(db_result(db_query("SELECT object FROM {exportables_object_cache} WHERE type = '%s' AND machine = '%s'", $type, $machine)));
  return $object;
}

/**
 * Deletes an object from cache.
 * @param string $type
 * @param string $machine
 * @return boolean
 */
function exportables_delete_object_from_cache($type, $machine) {
  $result = db_query("DELETE FROM {exportables_object_cache} WHERE type = '%s' AND machine = '%s'", $type, $machine);
  if (FALSE === $result) {
    return FALSE;
  }
  return TRUE;
}



// ---------- MACHINE-READABLE NAMES ----------

/**
 * Generates a machine-readable name from an object.
 * @param string $type
 * @param mixed $object
 * @return string
 */
function exportables_machine_generate($type, $object) {
  $name = exportables_machine_object_property($type, 'title', $object);
  $original_name = preg_replace('/[^a-z0-9_]/', '_', strtolower($name));
  if (!exportables_machine_load_id($type, $original_name)) {
    return $original_name;
  }
  $number = 0;
  while (TRUE) {
    $name = $original_name .'_'. $number;
    if (!exportables_machine_load_id($type, $name)) {
      return $name;
    }
    $number++;
  }
}

/**
 * Saves a machine-readable name to the database.
 * @param string $type
 * @param mixed $object
 * @param string $machine
 * @return string|boolean
 *   The return value here comes from drupal_write_record(); if it
 *   did not succeed, it will return false, but otherwise a string
 *   constant will be returned as documented for that function.
 */
function exportables_machine_save($type, $object, $machine) {
  $id = exportables_machine_object_property($type, 'id', $object);
  $array = array('id' => $id, 'type' => $type, 'machine' => $machine);
  return drupal_write_record('exportables_machine_names', $array);
}

/**
 * Deletes a machine-readable name from the database.
 * @param string $type
 * @param integer $id
 * @param string $machine
 * @return boolean
 *   Returns true if successful, false if not.
 */
function exportables_machine_delete($type, $id, $machine) {
  $result = db_query("DELETE FROM {exportables_machine_names} WHERE type = '%s' AND id = %d AND machine = '%s'", $type, $id, $machine);
  if (!$result) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Retrieve machine-readable name given object and type.
 * @param string $type
 * @param mixed $object
 * @return string
 */
function exportables_machine_get($type, &$object) {
  $array = FALSE;
  if (is_array($object)) {
    $array = TRUE;
    $object = (object) $object;
  }
  $id = exportables_machine_object_property($type, 'id', $object);
  $machine = db_result(db_query("SELECT machine FROM {exportables_machine_names} WHERE id = %d AND type = '%s'", $id, $type));
  if (!$machine) {
    $machine = exportables_machine_generate($type, $object);
    exportables_machine_save($type, $object, $machine);
  }
  $object->machine = $machine;
  if ($array) {
    $object = (array) $object;
  }
  return $machine;
}

/**
 * Retrieve ID given machine-readable name and type.
 * @param string $type
 * @param string $machine
 * @return integer|boolean
 *   Returns the ID if available, FALSE if not.
 */
function exportables_machine_load_id($type, $machine) {
  return db_result(db_query("SELECT id FROM {exportables_machine_names} WHERE type = '%s' AND machine = '%s'", $type, $machine));
}

/**
 * Get an object's property given type, property, and object.
 * @param string $type
 * @param string $property
 * @param mixed $object
 * @return mixed
 *   Returns the value of the property.
 */
function exportables_machine_object_property($type, $property, $object) {
  $info = exportables_type_info($type);
  $object = (object) $object; // We support arrays too.
  return $object->{$info[$property .' property']}; // Get the property.
}


// ---------------- FEATURES INTEGRATION -----------------

/**
 * Indirect implementation of hook_features_export().
 *
 * Modules implementing hook_features_export() can wrap this function to keep
 * from having to duplicate its code; the main API difference is the $type
 * parameter, which is used to specify which type of exportable is being exported.
 *
 * @param string $type
 *   The $type parameter is the name of the exportable type, as provided in the
 *   array keys returned by hook_exportables().
 * @param array $data
 *   The $data parameter should be the data array that was passed to
 *   hook_features_export().
 * @param array $export
 *   The $export parameter should be the export array that was passed to
 *   hook_features_export().
 * @param string $module_name
 *   The $module_name parameter should be the module_name that was passed to
 *   hook_features_export().
 * @return array
 *   Returns the pipe array that hook_features_export() should return.
 */
function _exportables_features_export($type, $data, &$export, $module_name = '') {
  $pipe = array();
  $type_info = exportables_type_info($type);

  // $data contains the machine-readable names of all the items we're exporting
  foreach ($data as $machine) {
    $load_function = $type_info['load function'];
    $item = $load_function(exportables_machine_load_id($type, $machine));
    if ($item) {
      $export['features'][$type][$machine] = $machine;
    }
    else {
      // TODO determine if the features module provides a better error reporting mechanism than this
      watchdog('exportables', t('The !type !machine cannot be exported because it does not exist.', array('!type' => $type, '!machine' => $machine)));
    }
  }

  if (!in_array('exportables', $export['dependencies'])) {
    $export['dependencies'][] = 'exportables';
  }

  return $pipe;
}

/**
 * Indirect implementation of hook_features_export_options().
 *
 * Modules implementing hook_features_export_options() can wrap this function
 * to keep from having to duplicate its code; the main API difference is the
 * $type parameter, which is used to specify which type of exportable is
 * being exported.
 *
 * @param string $type
 *   The $type parameter is the name of the exportable type, as provided in the
 *   array keys returned by hook_exportables().
 * @return array
 *   Returns the array of exportable item options that hook_features_export_options()
 *   should return.
 */
function _exportables_features_export_options($type) {
  $type_info = exportables_type_info($type);
  $items = call_user_func($type_info['load all function']);
  $options = array();
  foreach ($items as $item) {
    $title_property = $type_info['title property'];
    $machine = exportables_machine_get($type, $item);
    $options[$machine] = $item->name;
  }
  return $options;
}

/**
 * Indirect implementation of hook_features_export_render().
 *
 * Modules implementing hook_features_export_render() can wrap this function
 * to keep from having to duplicate its code; the main API difference is the
 * $type parameter, which is used to specify which type of exportable is
 * being exported.
 *
 * @param string $type
 *   The $type parameter is the name of the exportable type, as provided in the
 *   array keys returned by hook_exportables().
 * @param string $module
 *   The $module parameter should be the module variable that was passed to
 *   hook_features_export_render().
 * @param array $data
 *   The $data parameter should be the data array that was passed to
 *   hook_features_export_render().
 * @return array
 *   Returns the code array (keyed by hook name) that should be returned
 *   by hook_features_export_render().
 */
function _exportables_features_export_render($type, $module, $data) {
  $output = array();
  $output[] = '  $items = array(';
  foreach ($data as $machine) {
    $output[] = '  ' . exportables_export_machine($type, $machine, '    ') . ',';
  }
  $output[] = '  );';
  $output[] = '  return $items;';
  $output = implode(PHP_EOL, $output);

  $type_info = exportables_type_info($type);

  return array(
    $type_info['hook name'] => $output,
    'enable'  => "  exportables_sync('$type', '$module');",
    'disable' => "  exportables_unsync('$type', '$module');",
  );
}
